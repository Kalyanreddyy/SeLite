<?xml version="1.0"?>
<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>

<overlay xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
         xmlns:html="http://www.w3.org/1999/xhtml">
    <script type="application/x-javascript" src="chrome://selenium-ide/content/api.js"/>
    <html:script type="application/javascript">
        //<![CDATA[
        /*
         * Copyright 2013 Peter Kehl
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *      http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */
        "use strict";
        Components.utils.import("chrome://selite-extension-sequencer/content/SeLiteExtensionSequencer.js");
        Components.utils.import("resource://gre/modules/AddonManager.jsm");

        var ide_api= new API();
        // Register itself - so that it shows up in Selenium IDE > Options > Options > Plugins
        ide_api.addPlugin( 'extension-sequencer@selite.googlecode.com' );
        
        AddonManager.getAllAddons(
        function( addons ) {
            var addonsById= {}; // Object { string addOnId => Addon object }.
            for( var addon of addons ) {
                addonsById[ addon.id ]= addon;
                if( addon.isActive && addon.hasResource( 'chrome/content/SeLiteExtensionSequencerManifest.js') ) {
                    Components.utils.import( addon.getResourceURI('chrome/content/SeLiteExtensionSequencerManifest.js').spec );
                }
            }
            
            var sortedPlugins= SeLiteExtensionSequencer.sortedPlugins();
            //alert( sortedPlugins.sortedPluginIds);
            if( Object.keys(sortedPlugins.missingDirectDependancies).length ) {
                var dependancyPluginNames= {}; // { pluginId => pluginName } - for dependancies only
                for( var dependantId in SeLiteExtensionSequencer.plugins ) {
                    var plugin= SeLiteExtensionSequencer.plugins[dependantId];
                    for( var dependencyPluginId in plugin.requisitePlugins ) {
                        dependancyPluginNames[dependencyPluginId]= plugin.requisitePlugins[dependencyPluginId];
                    }
                    for( var dependencyPluginId in plugin.optionalRequisitePlugins ) {
                        dependancyPluginNames[dependencyPluginId]= plugin.optionalRequisitePlugins[dependencyPluginId];
                    }
                }                
                var pluginIdToName= function(pluginId) {
                    return dependancyPluginNames[pluginId];
                };
                
                var msg= "Following Selenium IDE plugin(s) are missing their dependancy plugin(s). Therefore "+
                    "they will be disabled next time you start Firefox. Please, install any missing "+
                    "dependancies. Then apply Firefox menu > Tools > Add-ons > Extensions > XXX > Enable.\n\n"+
                    "Plugin(s) missing at least one direct dependency:\n";
                for( var pluginId in sortedPlugins.missingDirectDependancies ) {
                    addonsById[pluginId].userDisabled= true;
                    msg+= '\n' +addonsById[pluginId].name+ ' depends on missing plugin(s): ' +
                        sortedPlugins.missingDirectDependancies[pluginId].direct.map(pluginIdToName).join(', ')+ '.';
                    if( sortedPlugins.missingDirectDependancies[pluginId].indirect.length ) {
                        msg+= ' It also depends on disabled plugin(s): ' +
                        sortedPlugins.missingDirectDependancies[pluginId].indirect.map(pluginIdToName).join(', ')+ '.';
                    }
                    msg+= '\n';
                }
                if( Object.keys(sortedPlugins.missingIndirectDependancies).length ) {
                    msg+= "\nPlugin(s) missing indirect dependencies only:\n";
                    for( var pluginId in sortedPlugins.missingIndirectDependancies ) {
                        addonsById[pluginId].userDisabled= true;
                        msg+= '\n' +addonsById[pluginId].name+ ' depends on disabled plugin(s): ' +
                            sortedPlugins.missingIndirectDependancies[pluginId].map(pluginIdToName).join(', ')+ '.\n';
                    }
                }
                alert( msg );
            }
            var failed= {}; // Object { string failed pluginId => exception }
            for( var i=0; i<sortedPlugins.sortedPluginIds.length; i++ ) {
                var pluginId= sortedPlugins.sortedPluginIds[i];
                var plugin= SeLiteExtensionSequencer.plugins[pluginId];
                var ide_api = new API();
                try {
                    // I register the plugin even if it has no url. That way it
                    // will be listed in Selenium IDE > Options > Options > Plugins.
                    ide_api.addPlugin(pluginId);
                    if( plugin.ideUrl ) {
                        ide_api.addPluginProvidedIdeExtension( plugin.ideUrl );
                    }
                    if( plugin.coreUrl ) {
                        if( plugin.xmlUrl ) {
                            ide_api.addPluginProvidedUserExtension( plugin.coreUrl, plugin.xmlUrl );
                        }
                        else {
                            ide_api.addPluginProvidedUserExtension( plugin.coreUrl );
                        }
                    }
                    if( plugin.callBack ) {
                        plugin.callBack.call( null, ide_api );
                    }
                }
                catch(e) {
                    failed[pluginId]= e;
                }
            }
            if( Object.keys(failed).length ) {
                var messageItems= [];
                for( var pluginId in failed ) {
                    messageItems.push( pluginId+ ': ' + failed[pluginId] );
                }
                alert( "SeLiteExtensionSequencer couldn't load plugin(s): " +messageItems+ "." );
            }
        });
        //]]>
    </html:script>
</overlay>
