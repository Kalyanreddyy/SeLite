<?xml version="1.0"?>
<?xml-stylesheet href="chrome://selite-hands-on-gui/content/ui/bindings-and-look.css" type="text/css"?>
<!--
Copyright 2005 Shinya Kasatani
Copyright 2015 Peter Kehl

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<overlay id="clipboard-ovIDE" xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
    <window id="selenium-ide">
        <script type="application/x-javascript" src="chrome://selite-hands-on-gui/content/ui/handlers.js"/>
        <script type="application/x-javascript">
        //<![CDATA[
                window.setTimeout( function() {
                    var XUL_NS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
                  // Verbatim copy of function _loadSeleniumCommands() from Selenium's treeView.js, except for ID on the last line. Watch out: if you factor this code somewhere else, then replace 'this.editor' with 'window.editor'.
                  
                    var commands = [];

                    var nonWaitActions = ['open', 'selectWindow', 'chooseCancelOnNextConfirmation', 'answerOnNextPrompt', 'close', 'setContext', 'setTimeout', 'selectFrame'];

                    for (func in this.editor.seleniumAPI.Selenium.prototype) {
                        var r;
                        if (func.match(/^do[A-Z]/)) {
                            var action = func.substr(2,1).toLowerCase() + func.substr(3);
                            commands.push(action);
                            if (!action.match(/^waitFor/) && nonWaitActions.indexOf(action) < 0) {
                                commands.push(action + "AndWait");
                            }
                        } else if (func.match(/^assert.+/)) {
                            commands.push(func);
                            commands.push("verify" + func.substr(6));
                        } else if ((r = func.match(/^(get|is)(.+)$/))) {
                            var base = r[2];
                            commands.push("assert" + base);
                            commands.push("verify" + base);
                            commands.push("store" + base);
                            commands.push("waitFor" + base);
                            var r2;
                            if ((r = func.match(/^is(.*)Present$/))) {
                                base = r[1];
                                commands.push("assert" + base + "NotPresent");
                                commands.push("verify" + base + "NotPresent");
                                commands.push("waitFor" + base + "NotPresent");
                            } else {
                                commands.push("assertNot" + base);
                                commands.push("verifyNot" + base);
                                commands.push("waitForNot" + base);
                            }
                        }
                    }

                    commands.push("pause");
                    commands.push("store");
                    commands.push("echo");
                    commands.push("break");

                    commands.sort();
                    // end of verbatim copy
                    
                    var tree= document.getElementById('commands');
                    if( !tree.inputField.getAttribute('id') ) {
                        tree.inputField.setAttribute('id', 'treeTextbox' );
                    }
                    Editor.GENERIC_AUTOCOMPLETE.setCandidates(XulUtils.toXPCOMString(this.editor.getAutoCompleteSearchParam( tree.inputField.getAttribute('id') )),
                                                              XulUtils.toXPCOMArray(commands));                              
                
                    tree.inputField.setAttribute( 'oninput', 'onInPlaceEditInput( this.value );' );
                    tree.inputField.setAttribute( 'onblur', 'onInPlaceEditBlur();' ); // Side note: For some reason, for "blur" event keyword 'this' is the textbox, however this.value is not set.

                    // Prepare tree.inputField for autocomplete. This won't have effect until onTreeClick() changes 'type' attribute.
                    tree.inputField.setAttribute( 'autocompletesearch', "selite-generic" );
                    tree.inputField.setAttribute( 'autofill', "true" );
                    tree.inputField.setAttribute( 'completedefaultindex', "true" );
                    tree.inputField.setAttribute( 'completeselectedindex', "true" );
                    tree.inputField.setAttribute( 'enablehistory', "true" );
                    tree.inputField.setAttribute( "sizetopopup", "pref" );
                    tree.inputField.disableautocomplete= false;
                }, 1500 );
        //]]>
        </script>
    </window>
    <vbox id="testCasePane">
        <textbox id="commandAction2" oninput="window.editor.treeView.updateCurrentCommand('command', this.value)" onchange="window.editor.autoCompleteCommand(this.value)" type="autocomplete" autocompletesearch="selite-generic" autofill="true" completedefaultindex="true" completeselectedindex="true" enablehistory="true" tabscrolling="false" sizetopopup="pref"  disableautocomplete="false" maxrows="0"/>
    </vbox>
    <!-- 1. onclick: Selective tail override of Selenium IDE's onclick handler.
         2. Adding minheight: otherwise the tree changed the height quite a lot when clicking to edit some commands, which seemed shaking-like and distracting.
         3. ondblclick: it stops editing the cell (which was started in onclick). Then I set focus on the tree - otherwise it wouldn't run a command (as per https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Tutorial/Commands#Command_Dispatching).
    -->
    <tree id="commands" editable="true"
        onclick="onTreeClick(event);"
        ondblclick="onTreeDblClick(event);"
        minheight="80"
    />
    <treecol id="command" editable="false"/>
    <treecol id="target" editable="true" overflow="true"/>
    <treecol id="value" editable="true"/>
    
  <!-- Following can't be done by XBL bind for keyset#seleniumIDEKeys. It had a partial effect: the keys would show up in top Edit menu and also in context menu. However, it wouldn't react to the keys when typed. Also, having extends="xul:keyset" in XBL fails with error" 'In general, do not extend tag names'. -->
  <keyset id="seleniumIDEKeys">
    <key id="insert-command-key" key="I" command="cmd_insert_command"/>
    <key id="insert-comment-key" key="M" command="cmd_insert_comment"/>
  </keyset>
</overlay>