<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<?xml-stylesheet type="text/xsl" href="https://cdn.rawgit.com/selite/selite/master/extension-sequencer/src/chrome/content/selenese_reference_to_html.xsl"?>
<!-- If you'd like to preview this reference.xml in Firefox, open it either
- online at https://cdn.rawgit.com/selite/selite/91106478cbdecc86c53cce7dad1aa4f231754853/db-objects/src/chrome/content/reference.xml, or
- offline at chrome://selite-extension-sequencer/content/selenese_reference.html?chrome://selite-db-objects/content/reference.xml
Xml-stylesheet (whether remote or even local) didn't load up work when you open this in a browser locally via file://
-->
<apidoc package-name="SeLite DB Objects">
<function name="getReadRecord">
    <param name="info">Anonymous object in form {
        <dl>
            <dt>table</dt>
            <dd>SeLiteData.Table instance; optional - it must be specified if there is no <i>formula</i></dd>
            <dt>formula</dt>
            <dd>SeLiteData.RecordSetFormula instance; optional - it must be specified if there is no <i>table</i></dd>
            <dt>string columnName (optional)</dt>
            <dd>matchingValue (to match that column)</dd>
            <dt>string anotherColumnName (optional; there may be any number of matching columns)</dt>
            <dd>matchingValue (to match that column)</dd>
        </dl>
        }. You can pass the object via =&lt;&gt;{field: value, ...}&lt;&gt; notation as per http://selite.github.io/EnhancedSelenese.
    </param>
    <comment>Load max. one record from DB. If there's no matching record, return null. If there are two or more matching records, fail.
        <br/>
        This command is a part of SeLite DB Objects.
    </comment>
</function>
<function name="insertRecord">
    <param name="recordObject">Anonymous object with the fields to store, or SeLiteData.Record instance. You can pass it via =&lt;&gt;...&lt;&gt; notation as per http://selite.github.io/EnhancedSelenese. If the table uses an auto-generated primary key (stored in one column), then after this command inserts the record it loads the value of the primary key and saves it in the given <code>recordObject</code>. It also stores the value of the primary key in stored variable <code>insertedRecordKey</code>, which is useful if you're passing an object literal via =&lt;&gt;({ field:value,... })&lt;&gt; as <code>recordObject</code> and later you need the new key but not the whole object. (Note http://selite.github.io/ClassicSelenese#limitations-of-geteval-and-its-derivatives.)</param>
    <param name="table">SeLiteData.Table instance. You can pass it via =&lt;&gt;...&lt;&gt; notation as per http://selite.github.io/EnhancedSelenese.</param>
    <comment>Insert the given object as a new record in the given table.
        <br/>
        This command is a part of SeLite DB Objects.
    </comment>
</function>
<function name="insertCaptureKey">
    <param name="recordKeyAttributeLocator">
        Attribute locator, or a Javascript function, for primary key value of the inserted record. If we capture the primary key, and recordKeyLocator is a function, then it's called with one parameter: <code>selenium</code>.
    </param>
    <param name="compound">
        Anonymous object with structure { object record, SeLiteData.Table table }. Both object and table are as per respective parameters of <code>insertRecord</code>.
    </param>
    <comment>
        <br/>
        It inserts the <code>record</code> and sets <code>insertedRecordKey</code> just like <code>insertRecord</code>.
        The record's primary key will have value:
        <ul>
            <li>from <code>record</code>, if present</li>
            <li>generated in script database, if not using narrowing</li>
            <li>captured from the application, if using narrowing.</li>
        </ul>
        <br/>
        For the second case (when not narrowing), also capture its value from the application and assert its equality to the generated value.
        <br/>
        This command is a part of SeLite DB Objects.
    </comment>
</function>
</apidoc>
