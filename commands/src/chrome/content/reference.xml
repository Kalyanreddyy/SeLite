<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<?xml-stylesheet type="text/xsl" href="https://selite.googlecode.com/git/selenese_reference_to_html.xsl"?>
<!-- If you'd like to preview this reference.xml in Firefox, open it either from https://selite.googlecode.com/git/commands/src/chrome/content/reference.xml, or (once you install SeLite Commands) as chrome://selite-commands/content/reference.xml.

Xml-stylesheet (whether remote or even local) didn't load up work when you open this in a browser locally via file://
-->
<apidoc package-name="SeLite Commands">
<function name="typeRobust">
    <param name="target">identifier of the element to type the value for</param>
    <param name="value">value to type</param>
    <comment>This types the value in the target element, if the element exists.
        Otherwise it just passes silently.
    </comment>
</function>   
<function name="selectRobust">
    <param name="selectLocator">identifier of the element to select</param>
    <param name="optionLocator">value to type</param>
    <comment>This selects an option for a select list, if the select list exists.
        Otherwise it just passes silently.
    </comment>
</function>   
<function name="clickRobust">
    <param name="locator">identifier of the element to click at</param>
    <comment>This clicks at the element, if it exists. Otherwise it just passes silently.</comment>
</function>   
<function name="isTimestampDownToMilliseconds">
    <param name="locator">identifier of the element to parse the timestamp from</param>
    <param name="timestampInMilliseconds">Expected timestamp, in milliseconds, since Epoch (January 1, 1970 00:00:00 UTC)</param>
    <comment>Parse the given element as a timestamp and compare to the given timestamp, down to precision of milliseconds.
    </comment>
</function>
<function name="isTimestampDownToSeconds">
    <param name="locator">identifier of the element to parse the timestamp from</param>
    <param name="timestampInMilliseconds">Expected timestamp, in <strong>milliseconds</strong>, since Epoch (January 1, 1970 00:00:00 UTC)</param>
    <comment>Parse the given element as a timestamp and compare to the given timestamp, down to precision of seconds.
    </comment>
</function>
<function name="isTimestampDownToMinutes">
    <param name="locator">identifier of the element to parse the timestamp from</param>
    <param name="timestampInMilliseconds">Expected timestamp, in <strong>milliseconds</strong>, since Epoch (January 1, 1970 00:00:00 UTC)</param>
    <comment>Parse the given element as a timestamp and compare to the given timestamp, down to precision of minutes.
    </comment>
</function>
<function name="isTimestampDownToPrecision">
    <param name="locator">identifier of the element to parse the timestamp from</param>
    <param name="timestampDetails">Anonymous object in form {
        <dl>
            <dt>timestamp</dt>
            <dd>Expected timestamp, in <strong>milliseconds</strong>, since Epoch (January 1, 1970 00:00:00 UTC)</dd>
            <dt>precision</dt>
            <dd>Smallest displayed time unit, in milliseconds</dd>
            <dt>validatePrecision</dt>
            <dd>Whether to validate the precision; optional. If true, this command performs a partial validation that the smallest displayed unit is not smaller than given <code>precision</code>. This validation can't eliminate 100% of such statements, since it depends on the data being displayed. If the timestamp displays down to seconds and the precision is 1 minute, but the displayed value happens to be a whole minute, this won't report the inconsistency.<br/>E.g. the timestamp parsed from <code>locator</code> element is <i>Jan 1, 2014 15:00:01 UTC</i>. If <code>precision</code> is more than a thousand (i.e. more than a second), the validation would fail - since the displayed timestamp precision is in seconds. However, if the actual displayed timestamp is in multiplies of <code>precision</code>, then the validation can't be determined. E.g. timestamp <i>Jan 1, 2014 15:00:00 UTC</i> would conform to <code>precision</code> of 60,000 (i.e. a minute). That's because validation is based on the actual displayed value, not on its format.<!-- @TODO Consider checking the format - but then Selenium.prototype.isTimestampDownToPrecision() couldn't jusr use Date.parse(). It would also have to check the format. -->
            </dd>
            <dt>timezone</dt>
            <dd>To be defined once Firefox 27 comes out.</dd>
        </dl>
        }
    </param>
    <comment>Parse the given element as a timestamp (at the given timezone, if any - to be supported with Firefox 27)
        and compare to the given timestamp, down to given precision.
    </comment>
</function>
<function name="waitForTimestampDistinctDownToMilliseconds">
    <param name="timestampName">Label/name, usually reflecting an element or field, for which you want to get a distinct timestamp.</param>
    <param name="precision">Precision, in milliseconds; 1 by default.</param>
    <comment>Just like <code>waitForTimestampDistinctDownToSeconds</code>, but guaranteed timestamp separation is the given number of milliseconds.
    </comment>
</function>
<function name="waitForTimestampDistinctDownToSeconds">
    <param name="timestampName">Label/name, usually reflecting an element or field, for which you want to get a distinct timestamp.</param>
    <param name="precision">Precision, in seconds; 1 by default.</param>
    <comment>
       Use to record the moment when you inserted/updated such a field, and you want this timestamp to differ from
       <ol>
           <li>any previous timestamps with this label, and/or</li>
           <li>any future timestamps with this label</li>
       </ol>
       when comparing using given precision (in seconds).
       This makes sure that you get timestamps which can be compared as distinct.
       So it guarantees that timestamps with same label will have time distance between them at equal or greater than given precision.
    </comment>
</function>
<function name="waitForTimestampDistinctDownToMinutes">
    <param name="timestampName">Label/name, usually reflecting an  element or field, for which you want to get a distinct timestamp.</param>
    <param name="precision">Precision, in minutes; 1 by default.</param>
    <comment>Just like <code>waitForTimestampDistinctDownToSeconds</code>, but the guaranteed timestamp separation is 1 minute.
      <br/><br/>
      Warning: This keeps a count only of timestamps notes since you started Selenium IDE. If you re-started it soon
      after the previous run which could record timestamps, make sure you wait for a sufficient period to get distinct new timestamps.
      (That shouldn't be a problem with <code>waitForTimestampDistinctDownToSeconds</code> and <code>waitForTimestampDistinctDownToMilliseconds</code>).
    </comment>
</function>
<function name="indexBy">
    <param name="columnOrDetails">What to index by. Either <ul>
            <li>string - name of the column to index by</li>
            <li>object
                {<dl>
                    <dt>indexBy</dt>
                    <dd>string, name of the field to index by; required.
                            Values of this field must be unique within the source,
                            unless you also use <code>subIndexBy</code>.
                    </dd>
                    <dt>subIndexBy</dt>
                    <dd>string, name of the field to sub-index by; optional.
                            Used to index within groups or objects that have same <code>indexBy</code> value.
                            Values of this field must be unique within each group.
                        </dd>
                    <dt>store</dt>
                    <dd>string, name of the result stored variable; optional</dd>
                </dl>
                }
            </li>
        </ul>
    </param>
    <param name="sourceVariableName">Name of the stored variable which contains the source data to be indexed.
        If <code>columnOrDetails</code> is not an object, or if <code>columnOrDetails.target</code>
        is not set, then the result will replace the source (<code>storedVars[sourceVariableName]</code>).
    </param>
    <comment>Index data.
    </comment>
</function>   
<function name="clickRandom">
    <param name="radiosXPath">XPath expression to locate the radio button(s). Don't include leading 'xpath='.
        It can't be any other Selenium locator. You probably want to match them
        using XPath 'contains' function, e.g. //input[ @type='radio' and contains(@id, 'feedback-') ].
    </param>
    <param name="store">Optional; name of the stored variable to store the selected value, it may include
        field(s) e.g. '.field.subfield..' but the field(s) must be constant strings
    </param>
    <comment>This clicks at a random radio button from within a set of radio buttons identified by locator.</comment>
</function>   
<function name="selectRandom">
    <param name="selectLocator">Locator of <code>&lt;select&gt;...&lt;/select&gt;</code> to select an option for.</param>
    <param name="paramsOrStore">optional, either
        <ul>
            <li>a string which is the name of the stored variable to put the selected value in (more below), or</li>
            <li>an object in form { <ul>
                <li>excludeFirst: true - Whether to exclude the first option, optional</li>
                <li>excludeLast: true - Whether to exclude the last option, optional</li>
                <li>store: string  - name of the stored variable to store the selected value, it may include field(s) '.field.subfield..'
                    but the field(s) must be constant strings</li>
                </ul>
            </li>
        </ul>
    </param>
    <comment>This selects a random option from within <code>&lt;select&gt;...&lt;/select&gt;</code> identified by locator.
          It doesn't select any optgroup elements.
    </comment>
</function>
<function name="typeRandom">
    <comment>Type random characters into an input. It always types at least 1 character.
    </comment>
    <param name="locator">Locator of the text input</param>
    <param name="paramsOrStore">optional, either
        <ul>
            <li>string - name of the stored variable to save the value to (more below), or</li>
            <li>an object in form {
                <dl>
                    <dt>minLength</dt>
                    <dd>int, if present then it must be at least 1, otherwise it's set to 1.
                        If type==='email', then minLength must be at least 7 (e.g. a@hi.it), otherwise it's set to 7. If type==='password' and minLength is not set, then it defaults to 9.
                    </dd>
                    <dt>maxLength</dt>
                    <dd>int, if present then it must be at least minLength;
                        if not present, then input's 'maxlength' property is used; if that's not present, then 255
                    </dd>
                    <dt>type</dt>
                    <dd>string indicating type of the field (and what it can/should accept/refuse). Possible values:
                        <dl>
                            <dt>'email'</dt><dd>when generating an email address</dd>
                            <dt>'name'</dt><dd>when generating a human name (and some random letters A-Za-z)</dd>
                            <dt>'word'</dt><dd>word (random letter a-z)</dd>
                            <dt>'number'</dt><dd>when generating a non-negative number; see more options below</dd>
                            <dt>'text'</dt><dd>When generating random word(s) (and random letter-based text)</dd>
                            <dt>'password'</dt><dd>Password that contains at least one of a-z, A-Z, 0-9 and '!@#$%^&amp;*()-_'</dd>
                            <dt>'ugly'</dt><dd>When generating bad characters (possibly used for SQL injection, filesystem access).
                                It will try to include all unique ugly characters at least once, so it may always generate more
                                characters than minLength, therefore leaving some combinations untested.
                                (Indeed, it will never overstep maxLength or input's 'maxlength' property, if maxLength isn't set.)
                            </dd>
                        </dl>
                        If type is not set, then the default characters used are: alphanumerics, space, underscore, dash -
                    </dd>
                    <dt>decimal</dt>
                    <dd>boolean, optional. If true, then generate a decimal number. Any minLength/maxLength
                       (or HTML maxlength property of the input)
                      will apply to number of letters used, i.e. to number of generated digits + 1 (for the decimal point)
                    </dd>
                    <dt>scale</dt>
                    <dd>int If set, max length of the decimal fraction (max. number of digits right of decimal point).
                        It has to be higher than 0; if you pass scale: 0, it will be ignored.
                    </dd>
                    <dt>max</dt>
                    <dd>number (int or float) maximum value (inclusive, if 'scale' permits). Optional. Applied when type='number'.
                       It has to be higher than zero; zero will be ignored. If used, then 'minLength', 'maxLength' (or 'maxlength' property)
                         will be ignored. Indeed, if decimal is set and the result is smaller than max, then it may have more decimal places than max has.
                    </dd>
                    <dt>min</dt>
                    <dd>number (int or float) minimum value (inclusive). Optional, but it may be only used if 'max' is set. See 'max'.
                    </dd>
                    <dt>store</dt>
                    <dd>string name of the stored variable to store the selected value, it may include field(s) e.g. 'varX.field.subfield..'
                        but the field(s) must be constant strings
                    </dd>
                </dl>
            </li>
        </ul>
    </param>
</function>
<function name="typeRandomEmail">
    <param name="locator">Locator of the text input where to type the generated email address</param>
    <param name="params">optional, either
        <ul>
            <li>string - name (first or last or full) to base the email on, or</li>
            <li>object in form {
                <dl>
                    <dt>from</dt>
                    <dd>string locator of an element which has a name (as described above) in it; optional, you can use 'name' instead</dd>
                    <dt>name</dt>
                    <dd>string value of the name (as described above), optional; used only if 'from' is not present</dd>
                    <dt>store</dt>
                    <dd>name of the stored variable to save the value to, it may include field(s) e.g. 'varX.field.subfield..'
                        but the field(s) must be constant strings; optional</dd>
                    <dt>minLength</dt>
                    <dd>int as described for typeRandom action (i.e. doTypeRandom function), optional</dd>
                    <dt>maxLength</dt>
                    <dd>int as described for typeRandom action (i.e. doTypeRandom function), optional</dd>
                </dl>
               }
            </li>
        </ul>
    </param>
    <comment>Type random email address, based on a name already typed in another element. If you don't want the email address to be based on any name, then use <i>typeRandom</i> with <i>type='email' instead.</i></comment>
</function>
<function name="selectMapped">
    <comment>TODO implement + comment</comment>
</function>
<function name="disableJavascript">
    <comment>Disable Javascript for the web application that is being tested</comment>
</function>
<function name="enableJavascript">
    <comment>Disable Javascript for the web application that is being tested</comment>
</function>
<function name="selectTopFrameAnd">
    <param name="locatorOrLocators">Either
        <ul>
            <li>string - a locator, or</li>
            <li>array of locators, passed as array{ 'locator1', 'locator2'... } where each locator is an escaped Javascript string. You can use string expressions, not just string literals.</li>
        </ul>
        It's optional. If nothing is passed, then the command just selects the top frame.
    </param>
    <comment>
        Select the top frame. Then it waits for any specified frames to become present. However, it doesn't wait for the top frame. For that you should use 'andWait' postifx for the last command that loaded the current page. So you shouldn't need to use <b>selectTopFrameAndAndWait</b> at all.
    </comment>
</function>
</apidoc>
